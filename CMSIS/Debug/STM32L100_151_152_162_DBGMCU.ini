// File: STM32L100_151_152_162_DBGMCU.ini
// Version: 1.0.1
// Note: refer to STM32L100xx STM32L151xx STM32L152xx STM32L162xx Reference manual (RM0038)
//       refer to STM32L100xx datasheet
//       refer to STM32L151xx STM32L152xx datasheets
//       refer to STM32L162xx datasheet


/* variable to hold register values */
define unsigned long DbgMCU_CR;
define unsigned long DbgMCU_APB1_Fz;
define unsigned long DbgMCU_APB2_Fz;

// <<< Use Configuration Wizard in Context Menu >>>

// <h> Debug MCU configuration register (DBGMCU_CR)
//                                   <i> Reserved bits must be kept at reset value
//   <o.6..7> TRACE_MODE             <i> Trace Mode
//      <0=> Asynchronous
//      <1=> Synchronous: TRACEDATA Size 1
//      <2=> Synchronous: TRACEDATA Size 2
//      <3=> Synchronous: TRACEDATA Size 4
//   <o.5>  TRACE_IOEN               <i> Trace I/O Enable
//   <o.2>  DBG_STANDBY              <i> Debug Standby mode
//   <o.1>  DBG_STOP                 <i> Debug Stop mode
//   <o.0>  DBG_SLEEP                <i> Debug Sleep mode
// </h>
DbgMCU_CR = 0x00000007;

// <h> Debug MCU APB1 freeze register (DBGMCU_APB1_FZ)
//                                   <i> Reserved bits must be kept at reset value
//   <o.22> DBG_I2C2_SMBUS_TIMEOUT   <i> SMBUS timeout mode stopped when core is halted
//   <o.21> DBG_I2C1_SMBUS_TIMEOUT   <i> SMBUS timeout mode stopped when core is halted
//   <o.12> DBG_IWDG_STOP            <i> Debug independent watchdog stopped when core is halted
//   <o.11> DBG_WWDG_STOP            <i> Debug window watchdog stopped when core is halted
//   <o.10> DBG_RTC_STOP             <i> Debug RTC stopped when core is halted
//   <o.5>  DBG_TIM7_STOP            <i> TIM7 counter stopped when core is halted
//   <o.4>  DBG_TIM6_STOP            <i> TIM6 counter stopped when core is halted
//   <o.2>  DBG_TIM4_STOP            <i> TIM4 counter stopped when core is halted
//   <o.1>  DBG_TIM3_STOP            <i> TIM3 counter stopped when core is halted
//   <o.0>  DBG_TIM2_STOP            <i> TIM2 counter stopped when core is halted
// </h>
_Fz = 0x00601837;

// <h> Debug MCU APB2 freeze register (DBGMCU_APB2_FZ)
//                                   <i> Reserved bits must be kept at reset value
//   <o.4>  DBG_TIM11_STOP           <i> TIM11 counter stopped when core is halted
//   <o.3>  DBG_TIM10_STOP           <i> TIM10 counter stopped when core is halted
//   <o.2>  DBG_TIM9_STOP            <i> TIM9 counter stopped when core is halted
// </h>
DbgMCU_APB2_Fz = 0x0000001C;

// <h> TPIU Pin Routing
//   <i> TRACECLK: Pin PE2
//   <i> TRACED[0]: Pin PE3
//   <i> TRACED[1]: Pin PE4
//   <i> TRACED[2]: Pin PE5
//   <i> TRACED[3]: Pin PE6
// </h>

// <<< end of configuration section >>>

/*----------------------------------------------------------------------------
  Setup_TracePins()  configure the used trace pins
 *----------------------------------------------------------------------------*/
FUNC void Setup_TracePins (unsigned char trace_mode) {

  if (trace_mode == 0) {           /* asynchronous mode */
          /* configure SWO (PB3) */
          _WDWORD(0x4002381C, ( _RDWORD(0x4002381C)                | 0x00000002) );  // RCC_AHBENR: IO port B clock enable
          _WDWORD(0x40020400, ((_RDWORD(0x40020400) & ~0x000000C0) | 0x00000080) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x40020408, ((_RDWORD(0x40020408)              ) | 0x000000C0) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4002040C, ((_RDWORD(0x4002040C) & ~0x000000C0)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x40020420, ((_RDWORD(0x40020420) & ~0x0000F000)             ) );  // GPIOx_AFRL:    Alternate Function to AF0
  }
  else {                           /* synchronous mode */
          /* configure TRACECLK (PE2) */
          _WDWORD(0x4002381C, ( _RDWORD(0x4002381C)                | 0x00000010) );  // RCC_AHBENR: IO port E clock enable
          _WDWORD(0x40021000, ((_RDWORD(0x40021000) & ~0x00000030) | 0x00000020) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x40021008, ((_RDWORD(0x40021008)              ) | 0x00000030) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4002100C, ((_RDWORD(0x4002100C) & ~0x00000030)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x40021020, ((_RDWORD(0x40021020) & ~0x00000F00)             ) );  // GPIOx_AFRL:    Alternate Function to AF0

    switch (trace_mode) {
      case 3:                      /* TRACEDATA[3..2] */
        /* configure TRACED3 */
          /* configure TRACED3 (PE6) */
       // _WDWORD(0x4002381C, ( _RDWORD(0x4002381C)                | 0x00000010) );  // RCC_AHBENR: IO port E clock enable
          _WDWORD(0x40021000, ((_RDWORD(0x40021000) & ~0x00003000) | 0x00002000) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x40021008, ((_RDWORD(0x40021008)              ) | 0x00003000) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4002100C, ((_RDWORD(0x4002100C) & ~0x00003000)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x40021020, ((_RDWORD(0x40021020) & ~0x0F000000)             ) );  // GPIOx_AFRL:    Alternate Function to AF0

        /* configure TRACED2 */
          /* configure TRACED2 (PE5) */
       // _WDWORD(0x4002381C, ( _RDWORD(0x4002381C)                | 0x00000010) );  // RCC_AHBENR: IO port E clock enable
          _WDWORD(0x40021000, ((_RDWORD(0x40021000) & ~0x00000C00) | 0x00000800) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x40021008, ((_RDWORD(0x40021008)              ) | 0x00000C00) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4002100C, ((_RDWORD(0x4002100C) & ~0x00000C00)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x40021020, ((_RDWORD(0x40021020) & ~0x00F00000)             ) );  // GPIOx_AFRL:    Alternate Function to AF0

      case 2:                      /* TRACEDATA[1] */
        /* configure TRACED1 */
          /* configure TRACED1 (PE4) */
       // _WDWORD(0x4002381C, ( _RDWORD(0x4002381C)                | 0x00000010) );  // RCC_AHBENR: IO port E clock enable
          _WDWORD(0x40021000, ((_RDWORD(0x40021000) & ~0x00000300) | 0x00000200) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x40021008, ((_RDWORD(0x40021008)              ) | 0x00000300) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4002100C, ((_RDWORD(0x4002100C) & ~0x00000300)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x40021020, ((_RDWORD(0x40021020) & ~0x000F0000)             ) );  // GPIOx_AFRL:    Alternate Function to AF0

      case 1:                      /* TRACEDATA[0] */
        /* configure TRACED0 */
          /* configure TRACED0 (PE3) */
       // _WDWORD(0x4002381C, ( _RDWORD(0x4002381C)                | 0x00000010) );  // RCC_AHBENR: IO port E clock enable
          _WDWORD(0x40021000, ((_RDWORD(0x40021000) & ~0x000000C0) | 0x00000080) );  // GPIOx_MODER:   Set Mode (Alternate Function)
          _WDWORD(0x40021008, ((_RDWORD(0x40021008)              ) | 0x000000C0) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
          _WDWORD(0x4002100C, ((_RDWORD(0x4002100C) & ~0x000000C0)             ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
          _WDWORD(0x40021020, ((_RDWORD(0x40021020) & ~0x0000F000)             ) );  // GPIOx_AFRL:    Alternate Function to AF0
        break;
    }
  }

}

/*----------------------------------------------------------------------------
  Setup_DBGMCU()  configure DBGMCU registers
 *----------------------------------------------------------------------------*/
FUNC void Setup_DBGMCU (void) {

  if (DbgMCU_CR & (1 << 5)){
    Setup_TracePins (((DbgMCU_CR >> 6) & 3));
  }

  _WDWORD(0xE0042004, DbgMCU_CR);                              // Set DBGMCU_CR
  _WDWORD(0xE0042008, DbgMCU_APB1_Fz);                         // Set DBGMCU_APB1_FZ
  _WDWORD(0xE004200C, DbgMCU_APB2_Fz);                         // Set DBGMCU_APB2_FZ
}


/*----------------------------------------------------------------------------
  OnResetExec()  Executed after reset via uVision's 'Reset'-button
 *----------------------------------------------------------------------------*/
FUNC void OnResetExec (void) {
  Setup_DBGMCU();
}

Setup_DBGMCU();                                           // Debugger Setup
